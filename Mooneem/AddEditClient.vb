' ============================  AddEditClient.vb  =============================
Imports System.Data.OleDb
Imports System.IO
Imports FontAwesome.Sharp
Imports QBFC12Lib

Public Class AddEditClient
    Inherits UserControl

    ' ─── controls ────────────────────────────────────────────────────────────
    Private cmbGroupNames As ComboBox
    Private btnAddGroup As Button
    ' Private cmbClients As ComboBox
    Private txtQBPath As TextBox
    Private txtClientName As TextBox
    Private btnBrowseQB As Button
    Private btnAdd As Button, btnEdit As Button, btnUpdate As Button,
            btnDelete As Button, btnBackup As Button
    Private dgvGroupClients As DataGridView

    Private pnlOverlay As Panel, lblStatus As Label

    'Private ReadOnly connStr As String =
    '    "Provider=Microsoft.ACE.OLEDB.12.0;" &
    '    "Data Source=C:\Users\lenovo\Documents\MooneemDB.accdb;" &
    '    "Persist Security Info=False;"
    Private ReadOnly connStr As String = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + Application.StartupPath + "\MooneemDB.accdb;Persist Security Info=False;"

    ' ─── constructor ────────────────────────────────────────────────────────
    Public Sub New()
        InitializeComponent()    ' generated by designer (keeps VS happy)
        BuildUI()
        'LoadAllGroupClientMappings()
        LoadGroups()
    End Sub

    ' ─── tiny helper (nice labels) ───────────────────────────────────────────
    Private Shared Function L(txt As String) As Label
        Return New Label With {.Text = txt,
                               .AutoSize = True,
                               .Font = New Font("Verdana", 10),
                               .Margin = New Padding(0, 6, 4, 0)}
    End Function


    Private Sub BuildUI()

        Me.Dock = DockStyle.Fill
        Me.BackColor = Color.White

        ' ═════════ ❶  TWO‑ROW TOP AREA  ═════════════════════════════════════
        Dim tlpTop As New TableLayoutPanel With {
        .Dock = DockStyle.Top,
        .AutoSize = True,
        .ColumnCount = 1,
        .RowCount = 2,
        .Padding = New Padding(15)
    }

        ' ── Row‑1 ▸ Group  +  Client name  +  QB file path ───────────────────
        Dim row1 As New FlowLayoutPanel With {
        .AutoSize = True,
        .Dock = DockStyle.Fill,
        .FlowDirection = FlowDirection.LeftToRight,
        .WrapContents = False
    }

        ' ① Group selector + “add”
        row1.Controls.Add(L("Group:"))
        cmbGroupNames = New ComboBox With {
        .Font = New Font("Verdana", 10),
        .DropDownStyle = ComboBoxStyle.DropDownList,
        .Width = 200
    }
        row1.Controls.Add(cmbGroupNames)

        btnAddGroup = New Button With {
        .Text = "➕",
        .Width = 32, .Height = 26,
        .Font = New Font("Verdana", 11, FontStyle.Bold),
        .BackColor = Color.FromArgb(0, 150, 136),
        .FlatStyle = FlatStyle.Flat,
        .ForeColor = Color.White,
        .Margin = New Padding(5, 1, 15, 0)
    }
        btnAddGroup.FlatAppearance.BorderSize = 0
        row1.Controls.Add(btnAddGroup)

        ' ② Client name textbox
        row1.Controls.Add(L("Client name:"))
        txtClientName = New TextBox With {
        .Font = New Font("Verdana", 10),
        .Width = 200
    }
        row1.Controls.Add(txtClientName)

        ' ③ QB file path + browse
        row1.Controls.Add(L("QB file:"))
        txtQBPath = New TextBox With {
        .Font = New Font("Verdana", 10),
        .Width = 330
    }
        row1.Controls.Add(txtQBPath)

        btnBrowseQB = New Button With {
        .Text = "...",
        .Width = 34, .Height = 26,
        .Font = New Font("Verdana", 9, FontStyle.Bold)
    }
        row1.Controls.Add(btnBrowseQB)

        tlpTop.Controls.Add(row1)         ' add the first line to TLP

        ' ── Row‑2 ▸ CRUD & Backup buttons only ───────────────────────────────
        Dim row2 As New FlowLayoutPanel With {
        .AutoSize = True,
        .Dock = DockStyle.Fill,
        .FlowDirection = FlowDirection.LeftToRight,
        .WrapContents = False,
        .Padding = New Padding(0, 6, 0, 0)
    }

        btnAdd = MakeOpButton("Add", Color.FromArgb(0, 150, 136))
        btnEdit = MakeOpButton("Edit", Color.FromArgb(255, 152, 0))
        btnDelete = MakeOpButton("Delete", Color.FromArgb(211, 47, 47))
        btnBackup = MakeOpButton("Backup file", Color.FromArgb(96, 125, 139))

        row2.Controls.AddRange({btnAdd, btnEdit, btnUpdate, btnDelete, btnBackup})
        tlpTop.Controls.Add(row2)




        ' --- grid set‑up -----------------------------------------------------------
        dgvGroupClients = New DataGridView With {
    .Dock = DockStyle.Fill,
    .ReadOnly = False,
    .AllowUserToAddRows = False,
    .AllowUserToDeleteRows = False,
    .EnableHeadersVisualStyles = False,
    .AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None, ' ← manual widths
    .SelectionMode = DataGridViewSelectionMode.FullRowSelect,
    .MultiSelect = False,
    .EditMode = DataGridViewEditMode.EditOnEnter,
    .ColumnHeadersDefaultCellStyle = New DataGridViewCellStyle With {
        .BackColor = Color.FromArgb(31, 30, 68),
        .ForeColor = Color.White,
        .Font = New Font("Verdana", 10, FontStyle.Bold)
    },
    .Font = New Font("Verdana", 10),
    .RowTemplate = New DataGridViewRow With {.Height = 26},
    .BackgroundColor = Color.White
}

        ' --- add columns -----------------------------------------------------------
        Dim chkCol As New DataGridViewCheckBoxColumn With {.Name = "Select", .HeaderText = "Select", .Width = 60}
        dgvGroupClients.Columns.Add(chkCol)

        Dim colGroup = dgvGroupClients.Columns.Add("GroupName", "Group")
        Dim colClient = dgvGroupClients.Columns.Add("ClientName", "Client")
        Dim colFile = dgvGroupClients.Columns.Add("QBFilePath", "QB File Path")

        ' --- fix widths ------------------------------------------------------------
        dgvGroupClients.Columns("GroupName").Width = 140  ' ⇠ ~40 chars, readable
        dgvGroupClients.Columns("ClientName").Width = 260  ' ⇠ ~60 chars
        ' last column stretches automatically:
        dgvGroupClients.Columns("QBFilePath").AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill

        ' make every column except the checkbox read‑only
        For Each col As DataGridViewColumn In dgvGroupClients.Columns
            If col.Name <> "Select" Then col.ReadOnly = True
        Next



        ' ═════════ ❸  OVERLAY  (optional)  ═══════════════════════════════════
        '    pnlOverlay = New Panel With {
        '    .Size = New Size(400, 50),
        '    .BackColor = Color.FromArgb(20, 0, 150, 136),
        '    .Visible = False,
        '    .Anchor = AnchorStyles.None
        '}
        pnlOverlay = New Panel With {
            .Size = New Size(400, 50),
            .BackColor = Color.FromArgb(20, 0, 150, 136),
            .Visible = False,
            .Anchor = AnchorStyles.None
        }

        ' Center it manually
        AddHandler Me.Resize, Sub(sender, e)
                                  pnlOverlay.Location = New Point(
            (Me.ClientSize.Width - pnlOverlay.Width) \ 2,
            (Me.ClientSize.Height - pnlOverlay.Height) \ 2
        )
                              End Sub

        lblStatus = New Label With {
        .Dock = DockStyle.Fill,
        .TextAlign = ContentAlignment.MiddleCenter,
        .ForeColor = Color.Black,
        .Font = New Font("Verdana", 10, FontStyle.Bold)
    }
        pnlOverlay.Controls.Add(lblStatus)

        ' ═════════ Assemble order ════════════════════════════════════════════
        Me.Controls.Add(dgvGroupClients)
        Me.Controls.Add(tlpTop)
        Me.Controls.Add(pnlOverlay)
        pnlOverlay.BringToFront()

        ' ═════════ Event wiring ══════════════════════════════════════════════
        AddHandler cmbGroupNames.SelectedIndexChanged, AddressOf cmbGroupNames_SelectedIndexChanged

        AddHandler dgvGroupClients.CellClick, AddressOf GridRowSelected

        AddHandler btnBrowseQB.Click, AddressOf BrowseQBFile
        AddHandler btnAddGroup.Click, AddressOf AddGroup
        AddHandler btnAdd.Click, AddressOf AddClient
        AddHandler btnEdit.Click, AddressOf EditClient
        AddHandler btnDelete.Click, AddressOf DeleteClient
        AddHandler btnBackup.Click, AddressOf BackupClientFile

        ' Ensure only one row checkbox can be selected at a time
        AddHandler dgvGroupClients.CellContentClick,
        Sub(s, e)
            If e.RowIndex < 0 Then Return ' Skip header click
            If dgvGroupClients.Columns(e.ColumnIndex).Name <> "Select" Then Return

            ' Uncheck all other checkboxes
            For Each row As DataGridViewRow In dgvGroupClients.Rows
                If row.Index <> e.RowIndex Then
                    row.Cells("Select").Value = False
                End If
            Next
        End Sub

    End Sub


    Private Sub GridRowSelected(sender As Object, e As DataGridViewCellEventArgs)
        ' Ignore header clicks or out-of-bounds
        If e.RowIndex < 0 OrElse e.RowIndex >= dgvGroupClients.Rows.Count Then Exit Sub

        Dim selectedRow = dgvGroupClients.Rows(e.RowIndex)

        ' Load client name
        txtClientName.Text = selectedRow.Cells("ClientName").Value?.ToString()

        ' Load QB file path
        txtQBPath.Text = selectedRow.Cells("QBFilePath").Value?.ToString()

        ' Select matching group in ComboBox
        Dim groupName = selectedRow.Cells("GroupName").Value?.ToString()
        For i = 0 To cmbGroupNames.Items.Count - 1
            Dim item = DirectCast(cmbGroupNames.Items(i), KeyValuePair(Of Integer, String))
            If item.Value = groupName Then
                cmbGroupNames.SelectedIndex = i
                Exit For
            End If
        Next
    End Sub






    ' ─── small helper for op buttons ────────────────────────────────────────
    Private Shared Function MakeOpButton(text As String, back As Color) As Button
        Dim btn As New Button With {
        .Text = text,
        .Font = New Font("Verdana", 9, FontStyle.Bold),
        .BackColor = back,
        .ForeColor = Color.White,
        .FlatStyle = FlatStyle.Flat,
        .Height = 28,
        .Width = 90,
        .Margin = New Padding(10, 1, 0, 0)
    }

        ' You must set this AFTER creating the button
        btn.FlatAppearance.BorderSize = 0

        Return btn
    End Function


    ' ─── overlay helpers ────────────────────────────────────────────────────
    Private Sub ShowStatus(msg As String)
        lblStatus.Text = msg
        pnlOverlay.Visible = True
        pnlOverlay.BringToFront()
        Application.DoEvents()
    End Sub
    Private Sub HideStatus()
        pnlOverlay.Visible = False
    End Sub

    ' ════════════════════════════════════════════════════════════════════════
    '                       DATA ‑ LOADING  /  EVENTS
    ' ════════════════════════════════════════════════════════════════════════
    Private Sub LoadGroups()

        Dim groupList As New List(Of KeyValuePair(Of Integer, String)) _
            From {New KeyValuePair(Of Integer, String)(0, "-------- Select -------")}

        Using conn As New OleDbConnection(connStr)
            Dim cmd As New OleDbCommand("SELECT ID, GroupName FROM Groups", conn)
            conn.Open()
            Using reader = cmd.ExecuteReader()
                While reader.Read()
                    groupList.Add(New KeyValuePair(Of Integer, String)(
                        CInt(reader("ID")),
                        reader("GroupName").ToString()))
                End While
            End Using
        End Using

        cmbGroupNames.DataSource = groupList
        cmbGroupNames.DisplayMember = "Value"
        cmbGroupNames.ValueMember = "Key"
    End Sub

    Private Sub cmbGroupNames_SelectedIndexChanged(sender As Object, e As EventArgs)
        If cmbGroupNames.SelectedIndex <= 0 Then
            dgvGroupClients.Rows.Clear()
            Return
        End If
        LoadClientsForGroup()
    End Sub

    Private Sub LoadClientsForGroup()
        dgvGroupClients.Rows.Clear()

        Dim grp = DirectCast(cmbGroupNames.SelectedItem, KeyValuePair(Of Integer, String))
        Dim groupId As Integer = grp.Key

        Using conn As New OleDbConnection(connStr)
            conn.Open()

            Dim sql As String
            Dim cmd As OleDbCommand

            If groupId = 0 Then
                ' Show all clients
                sql = "
                SELECT GC.GroupID, G.GroupName, GC.ClientName, GC.QBFilePath
                FROM GroupClientMapping GC
                INNER JOIN Groups G ON GC.GroupID = G.ID"
                cmd = New OleDbCommand(sql, conn)
            Else
                ' Show only clients from selected group
                sql = "
                SELECT GC.GroupID, G.GroupName, GC.ClientName, GC.QBFilePath
                FROM GroupClientMapping GC
                INNER JOIN Groups G ON GC.GroupID = G.ID
                WHERE GC.GroupID = ?"
                cmd = New OleDbCommand(sql, conn)
                cmd.Parameters.AddWithValue("?", groupId)
            End If

            Using r = cmd.ExecuteReader()
                While r.Read()
                    dgvGroupClients.Rows.Add(False,
                    r("GroupName").ToString(),
                    r("ClientName").ToString(),
                    r("QBFilePath").ToString())
                End While
            End Using
        End Using
    End Sub


    ' ─── browse QBW file -----------------------------------------------------
    Private Sub BrowseQBFile(sender As Object, e As EventArgs)
        Using ofd As New OpenFileDialog With {
            .Filter = "QuickBooks company|*.qbw|All files|*.*"}
            If ofd.ShowDialog() = DialogResult.OK Then
                txtQBPath.Text = ofd.FileName
            End If
        End Using
    End Sub

    ' ─── stubs for the CRUD buttons (fill in later) -------------------------
    Private Sub AddGroup(sender As Object, e As EventArgs)
        Dim newGroupName As String = InputBox("Enter new group name:", "Add Group")

        If String.IsNullOrWhiteSpace(newGroupName) Then
            MessageBox.Show("Group name cannot be empty.")
            Return
        End If

        ' Check if the group already exists (optional)
        Using conn As New OleDbConnection(connStr)
            conn.Open()

            ' Check for duplicate group name
            Dim checkCmd As New OleDbCommand("SELECT COUNT(*) FROM Groups WHERE GroupName = ?", conn)
            checkCmd.Parameters.AddWithValue("?", newGroupName)
            Dim count As Integer = Convert.ToInt32(checkCmd.ExecuteScalar())
            If count > 0 Then
                MessageBox.Show("A group with this name already exists.")
                Return
            End If

            ' Insert new group
            Dim insertCmd As New OleDbCommand("INSERT INTO Groups (GroupName) VALUES (?)", conn)
            insertCmd.Parameters.AddWithValue("?", newGroupName)
            insertCmd.ExecuteNonQuery()
        End Using

        MessageBox.Show("Group added successfully.")
        LoadGroups() ' Refresh group list
    End Sub
    Private Sub AddClient(sender As Object, e As EventArgs)
        If cmbGroupNames.Text = "" Or txtClientName.Text = "" Or txtQBPath.Text = "" Then
            MessageBox.Show("Please fill all fields.")
            Return
        End If

        ' Get selected group ID
        If cmbGroupNames.SelectedItem Is Nothing Then
            MessageBox.Show("Please select a group.")
            Return
        End If

        Dim groupId As Integer = Convert.ToInt32(cmbGroupNames.SelectedValue)
        ' MessageBox.Show("Selected GroupID: " & groupId.ToString())


        ' Insert into GroupClientMapping
        Using conn As New OleDbConnection(connStr)
            Dim cmd As New OleDbCommand("INSERT INTO GroupClientMapping (GroupID, ClientName, QBFilePath) VALUES (?, ?, ?)", conn)
            cmd.Parameters.AddWithValue("?", groupId)
            cmd.Parameters.AddWithValue("?", txtClientName.Text)
            cmd.Parameters.AddWithValue("?", txtQBPath.Text)
            conn.Open() ' <<< This was missing
            cmd.ExecuteNonQuery() ' <<< This was missing
        End Using

        MessageBox.Show("Client added.")
        LoadClientsForGroup()
        'LoadAllGroupClientMappings()
    End Sub
    Private Sub EditClient(sender As Object, e As EventArgs)
        Dim selectedRowIndex As Integer = -1

        ' Find selected row
        For i As Integer = 0 To dgvGroupClients.Rows.Count - 1
            If Convert.ToBoolean(dgvGroupClients.Rows(i).Cells("Select").Value) = True Then
                selectedRowIndex = i
                Exit For
            End If
        Next

        If selectedRowIndex = -1 Then
            MessageBox.Show("Please select a row to update.")
            Return
        End If

        ' Get old values
        Dim oldClientName = dgvGroupClients.Rows(selectedRowIndex).Cells("ClientName").Value.ToString()
        Dim oldGroupName = dgvGroupClients.Rows(selectedRowIndex).Cells("GroupName").Value.ToString()

        ' Get GroupID of old group
        Dim oldGroupId As Integer = GetGroupIdByName(oldGroupName)
        If oldGroupId = 0 Then
            MessageBox.Show("Invalid old group name.")
            Return
        End If

        ' Get new GroupID from ComboBox
        Dim newGroupId As Integer = Convert.ToInt32(cmbGroupNames.SelectedValue)

        ' Perform update in DB
        Using conn As New OleDbConnection(connStr)
            Dim cmd As New OleDbCommand("UPDATE GroupClientMapping SET GroupID = ?, ClientName = ?, QBFilePath = ? WHERE GroupID = ? AND ClientName = ?", conn)
            cmd.Parameters.AddWithValue("?", newGroupId)
            cmd.Parameters.AddWithValue("?", txtClientName.Text)
            cmd.Parameters.AddWithValue("?", txtQBPath.Text)
            cmd.Parameters.AddWithValue("?", oldGroupId)
            cmd.Parameters.AddWithValue("?", oldClientName)
            conn.Open()
            cmd.ExecuteNonQuery()
        End Using

        MessageBox.Show("Record updated successfully.")
        LoadClientsForGroup()
    End Sub

    Private Sub DeleteClient(sender As Object, e As EventArgs)
        Dim selectedRowIndex As Integer = -1

        ' Find selected row
        For i As Integer = 0 To dgvGroupClients.Rows.Count - 1
            If Convert.ToBoolean(dgvGroupClients.Rows(i).Cells("Select").Value) = True Then
                selectedRowIndex = i
                Exit For
            End If
        Next

        If selectedRowIndex = -1 Then
            MessageBox.Show("Please select a row to delete.")
            Return
        End If

        ' Get values from selected row
        Dim groupName = dgvGroupClients.Rows(selectedRowIndex).Cells("GroupName").Value.ToString()
        Dim clientName = dgvGroupClients.Rows(selectedRowIndex).Cells("ClientName").Value.ToString()

        Dim groupId = GetGroupIdByName(groupName)
        If groupId = 0 Then
            MessageBox.Show("Invalid group name.")
            Return
        End If

        ' Confirm deletion
        If MessageBox.Show($"Are you sure you want to delete the record for client '{clientName}' in group '{groupName}'?", "Confirm Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) = DialogResult.No Then
            Return
        End If

        ' Delete from DB
        Using conn As New OleDbConnection(connStr)
            Dim cmd As New OleDbCommand("DELETE FROM GroupClientMapping WHERE GroupID = ? AND ClientName = ?", conn)
            cmd.Parameters.AddWithValue("?", groupId)
            cmd.Parameters.AddWithValue("?", clientName)
            conn.Open()
            cmd.ExecuteNonQuery()
        End Using

        MessageBox.Show("Record deleted successfully.")
        ' Clear form inputs
        ' cmbGroupNames.SelectedIndex = -1
        txtClientName.Text = ""
        txtQBPath.Text = ""
        LoadClientsForGroup()
    End Sub




    Private Sub BackupClientFile(sender As Object, e As EventArgs)
        Try
            Dim selectedRowIndex As Integer = -1

            ' Find selected row
            For i As Integer = 0 To dgvGroupClients.Rows.Count - 1
                If Convert.ToBoolean(dgvGroupClients.Rows(i).Cells("Select").Value) = True Then
                    selectedRowIndex = i
                    Exit For
                End If
            Next

            If selectedRowIndex = -1 Then
                MessageBox.Show("Please select a row to update.")
                Return
            End If
            ' Dim qbFilePath As String = selectedRowIndex.Cells("QBFilePath").Value.ToString()
            Dim qbFilePath = dgvGroupClients.Rows(selectedRowIndex).Cells("QBFilePath").Value.ToString()

            If Not File.Exists(qbFilePath) Then
                MessageBox.Show("The specified QBW file does not exist: " & qbFilePath, "File Not Found", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Return
            End If


            Dim folderDialog As New FolderBrowserDialog()
            folderDialog.Description = "Select folder to save backup"
            folderDialog.SelectedPath = "C:\"  ' Optional: set initial path

            If folderDialog.ShowDialog() <> DialogResult.OK Then
                MessageBox.Show("Backup canceled by user.", "Cancelled", MessageBoxButtons.OK, MessageBoxIcon.Information)
                Return
            End If

            Dim backupFolderPath As String = folderDialog.SelectedPath
            Cursor.Current = Cursors.WaitCursor
            ShowStatus("Backing up QuickBooks file. Please wait...")
            ' Initialize QBFC session
            Dim sessionManager As New QBSessionManager()
            sessionManager.OpenConnection("", "Mooneem App")
            sessionManager.BeginSession(qbFilePath, ENOpenMode.omSingleUser)

            ' Make a dummy request to get a QBXML response
            Dim msgSetReq As IMsgSetRequest = sessionManager.CreateMsgSetRequest("US", 8, 0)
            msgSetReq.AppendCompanyQueryRq()
            Dim response As IMsgSetResponse = sessionManager.DoRequests(msgSetReq)

            ' Generate QBB-like file from response
            Dim fileName As String = Path.GetFileNameWithoutExtension(qbFilePath)
            Dim backupFilePath As String = Path.Combine(backupFolderPath, fileName & ".QBB")

            File.WriteAllText(backupFilePath, response.ToXMLString)

            sessionManager.EndSession()
            sessionManager.CloseConnection()
            HideStatus()
            Cursor.Current = Cursors.Default
            MessageBox.Show("Backup saved to: " & backupFilePath, "Backup Complete", MessageBoxButtons.OK, MessageBoxIcon.Information)

        Catch ex As Exception
            MessageBox.Show("Error during backup: " & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Function GetGroupIdByName(groupName As String) As Integer
        Using conn As New OleDbConnection(connStr)
            Dim cmd As New OleDbCommand("SELECT ID FROM Groups WHERE GroupName = ?", conn)
            cmd.Parameters.AddWithValue("?", groupName)
            conn.Open()
            Dim result = cmd.ExecuteScalar()
            If result IsNot Nothing Then
                Return Convert.ToInt32(result)
            End If
        End Using
        Return 0
    End Function
    ' ─── lightweight DTO used by the grid / other routines ------------------
    Private Class ClientGridRow
        Public Property SelectRow As Boolean
        Public Property GroupName As String
        Public Property ClientName As String
        Public Property QBFilePath As String
    End Class
End Class
